{"version":3,"sources":["Messages.js","MessageInput.js","OnlineNow.js","DMWindow.js","App.js","serviceWorker.js","index.js"],"names":["Messages","id","this","props","messages","map","msg","index","key","React","Component","MessageInput","state","value","handleChange","bind","handleSubmit","event","setState","target","isTypingEmitFunc","emitMsgFunc","preventDefault","className","onSubmit","autoComplete","onChange","OnlineNow","Object","entries","userList","IDnickPair","href","onClick","createNewDMWindowFunc","DMWindow","console","log","emitDMMessageFunc","type","closeButtonFunc","App","isTypingEmit","socket","emit","ourNick","emitMessage","message","emitDMMessage","toID","createNewDMWindow","DMWindowData","closeDMWindow","newDMWindowData","onlineNow","dummySocketID","whoIsTyping","io","prompt","on","nick","concat","fromNick","fromID","who","includes","setTimeout","newWhoIsTyping","indexOf","splice","isTypingDiv","DMWindowArray","values","data","push","length","Fragment","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.767e37db.chunk.js","sourcesContent":["import React from 'react';\nimport './Messages.css';\n\nclass Messages extends React.Component {\n \n  render() {\n    return (\n      <ul id=\"messages\">\n        {this.props.messages.map((msg, index) => <li key={index}>{msg[0]} :: {msg[1]}</li>)}\n      </ul>\n    ); \n  }\n}\n\nexport default Messages;\n","import React from 'react';\nimport './MessageInput.css';\n\nclass MessageInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {value: ''};\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({value: event.target.value});\n    this.props.isTypingEmitFunc();\n  }\n\n  handleSubmit(event) {\n    this.props.emitMsgFunc(this.state.value);\n    event.preventDefault();\n    this.setState({value: ''});\n  }\n\n  render() {\n    return (\n      <form className=\"messageInputFormElement\" onSubmit={this.handleSubmit}>\n        <input className=\"messageInputInputElement\" autoComplete=\"off\" value={this.state.value} onChange={this.handleChange} />\n        <button className=\"messageInputSendButton\">Send</button>\n      </form>\n    );\n  }\n}\n\n \n\nexport default MessageInput;\n\n\n\n","import React from 'react';\nimport './OnlineNow.css';\nimport Draggable from 'react-draggable';\n\nclass OnlineNow extends React.Component {\n \n  render() {\n\n    return (\n      <Draggable>\n        <div className=\"onlineNowBox\">\n          <h1>Online Users</h1>\n          <ul>\n            { Object.entries(this.props.userList).map((IDnickPair, index) => \n                <li key={index}>\n                    <a href=\"/#\" onClick={ () => \n                        this.props.createNewDMWindowFunc(IDnickPair) \n                    }>\n                        {IDnickPair[1]}\n                    </a>\n                </li> \n            )}\n          </ul>\n        </div>\n      </Draggable>\n    ); \n  }\n}\n\nexport default OnlineNow;\n","import React from 'react';\nimport './DMWindow.css';\nimport Draggable from 'react-draggable';\n\nclass DMWindow extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {value: ''};\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({value: event.target.value});\n  }\n\n  handleSubmit(event) {\n    console.log('called');\n    this.props.emitDMMessageFunc(this.props.IDnickPair[0], this.state.value);\n    event.preventDefault();\n    this.setState({value: ''});\n  }\n\n \n  render() {\n    return (\n      <Draggable>\n        <div className=\"DMWindowDiv\">\n          <div className=\"DMWindowHeader\"> { \"Direct Messages with: \" + this.props.IDnickPair[1] } </div>\n          <ul className=\"DMul\" >\n            {this.props.messages.map((msg, index) => <li key={index}>{msg[0]} :: {msg[1]}</li>)}\n          </ul>\n          <form onSubmit={this.handleSubmit}>\n            <input className=\"DMInputElement\" type=\"text\" value={this.state.value} onChange={this.handleChange} />\n          </form>\n          <button onClick={ () => this.props.closeButtonFunc(this.props.IDnickPair[0]) }>Close DM</button> \n        </div>\n      </Draggable>\n    ); \n  }\n}\n\nexport default DMWindow;\n","import React from 'react';\nimport './App.css';\nimport io from 'socket.io-client';\nimport Messages from './Messages.js'; \nimport MessageInput from './MessageInput.js'; \nimport OnlineNow from './OnlineNow.js';\nimport DMWindow from './DMWindow.js';\n\nclass App extends React.Component {\n \n  constructor(props) {\n    super(props);\n    // console.log('App component constructor called');\n    this.state = {\n      messages: [], //first item is the nick, second item is the message from that nick.\n      onlineNow: {dummySocketID: 'dummyNick'}, // reflects the same object held by server at any given moment. contains all active socket conncections to server. property: socket.id, value: nickname, for each connection\n      DMWindowData: {},\n      whoIsTyping: []\n    };  \n } \n\n  componentDidMount() {\n    const socket = io();\n    const ourNick = prompt(\"Please enter your nick\", \"Harry Potter\");\n\n    this.setState({socket, ourNick}); // same as {socket: socket, ourNick: ourNick}\n\n    socket.emit('whose online add', ourNick);\n\n    socket.on('chat message', (msg, nick) => {\n      this.setState({ messages: this.state.messages.concat([[nick, msg]]) });\n    });\n\n    socket.on('update whose online now', (userList) => {\n      this.setState({ onlineNow: userList });\n    });\n\n    socket.on('DM received', (fromNick, fromID, msg) => {\n      // console.log('we recieved a DM, fromNick=', fromNick, ' id=', fromID, ' msg=', msg);\n      if (fromID in this.state.DMWindowData) {\n        this.setState({DMWindowData: {...this.state.DMWindowData, \n          [fromID]: { IDnickPair: [fromID, fromNick], \n                     messages: [ ...this.state.DMWindowData[fromID].messages, [fromNick, msg] ]  \n          }\n        }});\n      } else {\n        this.setState({DMWindowData: {...this.state.DMWindowData, \n          [fromID]: { IDnickPair: [fromID, fromNick], \n                     messages: [ [fromNick, msg] ]  \n          }\n        }});\n      }\n    });\n\n    socket.on('somebody is typing', who => {\n\n      if ( this.state.whoIsTyping.includes(who) ) {\n        return;\n      } \n    \n      this.setState({whoIsTyping: [...this.state.whoIsTyping, who]});\n\n      setTimeout(() => { \n        const newWhoIsTyping = [...this.state.whoIsTyping];\n        const index = newWhoIsTyping.indexOf(who);\n        if (index !== -1) newWhoIsTyping.splice(index, 1);\n        this.setState({whoIsTyping: newWhoIsTyping}) \n      }, 2500);\n\n    });\n\n  }\n\n  isTypingEmit = () => {\n    this.state.socket.emit('is typing', this.state.ourNick);\n  }\n\n\n  emitMessage = (message) => {\n    this.state.socket.emit('chat message', message, this.state.ourNick);\n  }\n\n  emitDMMessage = (toID, message) => {\n    this.state.socket.emit('DM', toID, message);\n  }\n\n  createNewDMWindow = (IDnickPair) => {\n    console.log(\"createNewDMWindow fired, IDnickPair=\", IDnickPair);\n\n    this.setState({DMWindowData: { ...this.state.DMWindowData, \n        [IDnickPair[0]]: {IDnickPair: IDnickPair, messages: []} \n    }});\n    \n  }\n\n  closeDMWindow = (id) => {\n    const newDMWindowData = {...this.state.DMWindowData};\n    delete newDMWindowData[id];\n    this.setState({DMWindowData: newDMWindowData});\n  }\n\n  render() {\n\n    const DMWindowArray = [];\n    for (const data of Object.values(this.state.DMWindowData)) {\n      DMWindowArray.push(\n        <DMWindow \n          key={data.IDnickPair[0]}\n          IDnickPair={data.IDnickPair} \n          messages={data.messages} \n          closeButtonFunc={this.closeDMWindow}\n          emitDMMessageFunc={this.emitDMMessage}\n        />\n      );\n    }\n\n\n    let isTypingDiv;\n\n    if (this.state.whoIsTyping.length > 0) {\n      isTypingDiv = <div className=\"isTypingDiv\">{this.state.whoIsTyping.map(nick => nick + ', ')} is typing...</div>; \n    } else {\n      isTypingDiv = <div className=\"isTypingDiv\"></div>; \n    }\n\n\n\n    return (\n      <React.Fragment>\n      <OnlineNow userList={this.state.onlineNow} createNewDMWindowFunc={this.createNewDMWindow} />\n      { DMWindowArray }\n      { isTypingDiv }\n      <Messages messages={this.state.messages} />\n      <MessageInput emitMsgFunc={this.emitMessage} isTypingEmitFunc={this.isTypingEmit} />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n  ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}